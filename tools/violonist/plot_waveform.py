"""_summary_ : Plot waveforms for audio files in a given folder.
This script is used to plot the waveform generated by the BowedString instrument.
The waveform are arranged in a grid, where each row represents a different force and
each column represents a different bow position. This mimics the layout of a Schelleng diagram
and allows us to see how the waveform changes as we vary the force and bow position.
"""
import re
import sys
import os
from dataclasses import dataclass
import numpy as np
import matplotlib.pyplot as plt
import scipy.io


@dataclass
class Waveform:
    """
    A class representing a waveform.

    Attributes:
        samples (np.ndarray): An array of waveform samples.
        freq (int): The frequency of the waveform.
        force (float): The force of the waveform.
        vel (float): The velocity of the waveform.
        bow (float): The bow of the waveform.
    """
    samples: np.ndarray
    freq: int
    force: float
    vel: float
    bow: float

    def __init__(self, samples, freq, force, vel, bow):
        self.samples = samples
        self.freq = freq
        self.force = force
        self.vel = vel
        self.bow = bow


def main():
    """
    Plot waveforms for audio files in a given folder.

    Usage: plot_waveform.py <outputs_folder>

    The function reads audio files from the given folder and plots their waveforms
    for different frequencies, forces, and bow positions. The resulting plots are displayed
    using Matplotlib.

    Args:
        None

    Returns:
        None
    """
    args = sys.argv[1:]
    if len(args) != 1:
        print("Usage: plot_waveform.py <outputs_folder>")
        sys.exit(1)
    outputs_folder = args[0]

    dir_list = os.listdir(outputs_folder)

    # Filename ex: 196Hz_f0.00_v0.25_b0.00.wav
    pattern = re.compile(
        r"(?P<freq>\d+)Hz_f(?P<force>\d+\.\d+)_v(?P<vel>\d+\.\d+)_b(?P<bow>\d+\.\d+)\.wav")

    waves = []

    for file in dir_list:
        match = pattern.match(file)
        if match:
            freq = int(match.group("freq"))
            force = float(match.group("force"))
            vel = float(match.group("vel"))
            bow = float(match.group("bow"))
            samplerate, samples = scipy.io.wavfile.read(
                os.path.join(outputs_folder, file))

            # Lets just grab 2 periods worth of samples at the middle of the
            # file
            samples = samples[int(len(samples) /
                                  2 -
                                  samplerate /
                                  freq):int(len(samples) /
                                            2 +
                                            samplerate /
                                            freq)]
            waves.append(Waveform(samples, freq, force, vel, bow))

    # List all the frequencies we have
    freqs = set([wave.freq for wave in waves])
    freqs = sorted(freqs)

    for freq in freqs:
        waves_freq = [wave for wave in waves if wave.freq == freq]
        forces = set([wave.force for wave in waves_freq])
        forces = sorted(forces, reverse=True)
        bows = set([wave.bow for wave in waves_freq])
        bows = sorted(bows)

        fig = plt.figure()
        axes = fig.subplots(len(forces), len(bows), sharey='all')

        # fig, axes = plt.subplots(len(forces), len(bows), sharey='all')
        fig.suptitle(f"Frequency: {waves_freq[0].freq}Hz")

        for i, force in enumerate(forces):
            for j, bow in enumerate(bows):
                wave = [wave for wave in waves if wave.force ==
                        force and wave.bow == bow][0]
                axes[i][j].plot(wave.samples)
                axes[i][j].set_title(f"Force: {force}, Bow: {bow}")
        fig.tight_layout(pad=1.0)
    plt.show()



if __name__ == "__main__":
    main()
